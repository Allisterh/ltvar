// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <cmath>
#define _USE_MATH_DEFINES
#include <math.h>
#include <iostream>
#include <Rcpp.h>


using namespace std;
using namespace Rcpp;

// [[Rcpp::depends("RcppArmadillo")]]
// [[Rcpp::export]]

List fSampSPM(arma::mat mp, arma::mat mSig, arma::mat mPhi, arma::vec vmu,double dnu,double dV0,double da0,double db0,double dm0,double ds0,arma::vec vd,double dk0){
  int ns = mp.n_rows;
  int np = mp.n_cols;
  arma::mat mSign = mSig;
  arma::mat mPhin = mPhi;
  arma::vec vmun = vmu;

  // Sampling Sigma
  arma::vec sse=arma::zeros(np);
  for(int i=0;i<(ns-1);i++){
    sse = sse + arma::trans(pow(mp(i+1,arma::span::all)-mp(i,arma::span::all)*mPhi - vmu.t()*(arma::eye(np,np)-mPhi),2));
  }

  arma::vec vV = sse + arma::trans(pow(mp(1,arma::span::all)-vmu.t(),2)*(arma::eye(np,np)-pow(mPhi,2)));
  //vV.print();
  for(int i=0;i<(np-1);i++){
    int docounter=0;
    double dup=0;
    double dsign = 1/Rf_rgamma(dnu/2,(vV(i)+dV0)/2);;
    while(docounter<100 && dup<vd(i)){
      dsign = 1/Rf_rgamma(dnu/2,(vV(i)+dV0)/2);

      dup = abs(vmu(i))+dk0*sqrt(dsign/(1-pow(mPhi(i,i),2)));
      ++docounter;
    }
    if(docounter < 100){
      double dup2 = abs(vmu(i))+dk0*sqrt(mSig(i,i)/(1-pow(mPhi(i,i),2)));
      double dfrac = dup2/dup;
      double dftest = (arma::randu(1)).eval()(0,0);
      if(dftest < dfrac){
        mSign(i,i) = dsign;
      }
    }

  }

  // Sample Phi
  arma::vec vsum=arma::zeros(np);
  arma::vec vphii=arma::zeros(np);
  arma::vec vsigi=arma::zeros(np);
  for(int j=0;j<(np-1);j++){
    for(int k=1;k<(ns-2);k++){
      vsum(j) = vsum(j) + pow(mp(k,j)-vmu(j),2);
      vphii(j) = vphii(j) + (mp(k+1,j)-vmu(j))*(mp(k,j)-vmu(j));
    }
    vphii(j) = vphii(j)/vsum(j);
    vsigi(j) = mSign(j,j)/vsum(j);
  }

  for(int i=0;i<(np-1);i++){
    double dphin=100;
    int docounter=0;
    while(docounter<100 && dphin>=1){
      dphin = vphii(i)+sqrt(vsigi(i))*(arma::randn(1)).eval()(0,0);
      ++docounter;
    }
    if(docounter<100){
      double dphio = mPhi(i,i);
      double dup   = abs(vmu(i))+dk0*sqrt(mSign(i,i)/(1-pow(dphin,2)));
      double dup2  = abs(vmu(i))+dk0*sqrt(mSign(i,i)/(1-pow(dphio,2)));
      double x1 = Rf_dbeta((dphin+1)/2,da0,db0,0);
      double x2 = Rf_dbeta((dphio+1)/2,da0,db0,0);
      double dfrac = (x1/x2 )*(sqrt(1-pow(dphin,2))/sqrt(1-pow(dphio,2))*dup2)/dup;
      double dftest = (arma::randu(1)).eval()(0,0);
      if(dftest<dfrac){
        mPhin(i,i)=dphin;
      }
    }
  }

  // Sampling mu
  arma::mat mSig0 = sqrt(mSign*arma::pinv(arma::eye(np,np)-pow(mPhin,2)));
  vsigi = arma::zeros(np);
  for(int i=0;i<np;i++){
    vsigi(i) = 1/(1/pow(ds0,2)+(1-pow(mPhin(i,i),2)+(ns-1) * (1-pow(mPhin(i,i),2)))/mSign(i,i));
  }
  arma::vec sumc=arma::zeros(np);
  for(int j=0;j<(ns-2);j++){
    sumc = sumc + arma::trans(mp(j+1,arma::span::all)-arma::trans(mPhin*arma::trans(mp(j,arma::span::all))));
  }
  arma::vec vmui = arma::zeros(np);
  for(int i=0;i<(np-1);i++){
    vmui(i)=vsigi(i)*(dm0/pow(ds0,2)+(mp(0,i)*(1-mPhin(i,i))+(1-mPhin(i,i))*sumc(i))/mSign(i,i));
  }
  for(int i=0;i<(np-1);i++){
    int docounter=0;
    double dmun;
    double dup=0;
    while(docounter<100 && dup<vd(i)){
      dmun = abs(vmu(i))+sqrt(vsigi(i))*(arma::randn(1)).eval()(0,0);
      dup  = dmun+dk0*mSig0(i,i);
      docounter++;
    }
    if(docounter < 100){
      double dup2 = abs(vmu(i))+dk0*mSig0(i,i);
      double dfrac = dup2/dup;
      double dftest = (arma::randu(1)).eval()(0,0);
      if(dftest < dfrac){
        vmun(i)=dmun;
      }
    }
  }


  // return new values
  return List::create(Named("vmu")=vmun,Named("mPhi")=mPhin,Named("mSig")=mSign);

}
